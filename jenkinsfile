stage 'CI'
node {
    checkout scm
    git branch: 'jenkins2-course', 
        url: 'https://github.com/lteyjolfur/solitaire-systemjs-course'

    // pull dependencies from npm
    // on windows use: bat 'npm install'
    sh 'npm install'

    // stash code & dependencies to expedite subsequent testing
    // and ensure same code & dependencies are used throughout the pipeline
    // stash is a temporary archive
    stash name: 'everything', 
          excludes: 'test-results/**', 
          includes: '**'
    
    
    // test with PhantomJS for "fast" "generic" results
    // on windows use: bat 'npm run test-single-run -- --browsers PhantomJS'
    stage('Browser Testing'){
        parallel chrome: {
            runTests('Chrome')
        }, safari: {
            runTests('Chrome')
        }, chrome2: {
            runTests('Chrome')
        }
        
    }
    
    // archive karma test results (karma is configured to export junit xml files)
//    step([$class: 'JUnitResultArchiver', 
//          testResults: 'test-results/**/test-results.xml'])
          
    archiveArtifacts 'app/'
    
    
    
}

input 'Deploy to staging?'

stage('Deploy') {
    node {
        echo 'deployed'
    }
}

def notify(status){
    emailext (
      to: "wesmdemos@gmail.com",
      subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
    )
}

def runTests(browser){
        node('mac'){
        sh 'rm -rf *'
        unstash 'everything'
        sh "npm run test-single-run -- --browsers ${browser}"
        step([$class: 'JUnitResultArchiver', 
          testResults: 'test-results/**/test-results.xml'])
    }
}
